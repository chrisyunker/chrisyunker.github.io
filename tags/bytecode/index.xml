<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bytecode on yunker.io</title>
    <link>https://www.yunker.io/tags/bytecode/</link>
    <description>Recent content in bytecode on yunker.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Nov 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://www.yunker.io/tags/bytecode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tail vs. Body Recursion in Erlang Part 2</title>
      <link>https://www.yunker.io/posts/tail-vs-body-recursion-in-erlang-2/</link>
      <pubDate>Sun, 29 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunker.io/posts/tail-vs-body-recursion-in-erlang-2/</guid>
      <description>Recursion in Erlang Bytecode In part 1, I talked a little about how Erlang optimizes tail recursive functions, a process generally known as Tail Call Optimization (TCO). To verify this, we can compile the functions into Erlang assembler source code and take a look. Erlang assembler source is the disassembled bytecode which gets converted to a BEAM file.
The erlc compiler command has a flag (-S) to compile into Erlang assembly.</description>
    </item>
    
  </channel>
</rss>
